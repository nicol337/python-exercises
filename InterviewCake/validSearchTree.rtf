{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Light;\f2\fnil\fcharset129 AppleSDGothicNeo-Regular;
\f3\fnil\fcharset0 Georgia;\f4\froman\fcharset0 Times-Roman;\f5\fnil\fcharset0 STIXGeneral-Regular;
\f6\fnil\fcharset129 AppleMyungjo;\f7\fmodern\fcharset0 CourierNewPSMT;\f8\fnil\fcharset0 Monaco;
\f9\fmodern\fcharset0 Courier;\f10\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red77\green179\blue214;\red67\green67\blue67;
\red255\green255\blue170;\red38\green38\blue38;\red53\green118\blue190;\red93\green93\blue93;\red214\green214\blue214;
\red245\green245\blue245;\red46\green46\blue46;\red86\green85\blue84;\red250\green250\blue250;\red8\green71\blue136;
\red135\green135\blue135;\red166\green166\blue166;\red16\green125\blue188;\red60\green82\blue144;\red70\green154\blue233;
\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl400
{\field{\*\fldinst{HYPERLINK "https://www.interviewcake.com/"}}{\fldrslt 
\f0\b\fs40 \cf2 \cb3 \kerning1\expnd-4\expndtw-20
Interview Cake}}
\f0\b\fs40 \cf2 \cb3 \kerning1\expnd-4\expndtw-20
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl400
\ls1\ilvl0
\b0\fs28 \cf2 \kerning1\expnd0\expndtw0 		{\field{\*\fldinst{HYPERLINK "https://www.interviewcake.com/question/bst-checker?utm_source=weekly_email#"}}{\fldrslt Articles }}\
		{\field{\*\fldinst{HYPERLINK "https://www.interviewcake.com/about"}}{\fldrslt About}}\
		{\field{\*\fldinst{HYPERLINK "https://www.interviewcake.com/upgrade"}}{\fldrslt Upgrade}}\
\pard\pardeftab720\li300\sl400\sa300
\cf2 'sup Nicole. \'a0\'a0 {\field{\*\fldinst{HYPERLINK "https://www.interviewcake.com/auth/logout/?next=/"}}{\fldrslt Log out}}\
\pard\pardeftab720\sl660\sa200

\b\fs60 \cf4 \cb5 \kerning1\expnd-4\expndtw-20
Want help connecting with startups?\
\pard\pardeftab720\sl400\sa200

\b0\fs34 \cf6 \kerning1\expnd0\expndtw0 We work with companies in San Francisco, Silicon Valley and New York\'97big ones you know about, and small, upcoming ones. They're hiring both senior and junior candidates.\
No guarantees, but let us know if you're interested and we'll see if we have something for you. Oh, and unfortunately we can't help with internships right now\'97only full-time.\
\pard\pardeftab720\sl400
\cf6 \
\pard\pardeftab720\sl480\sa200\qc

\b\fs36 \cf2 \cb3 Help me find a great startup!
\b0\fs34 \cf6 \cb5 \
\pard\pardeftab720\sl400\qc
{\field{\*\fldinst{HYPERLINK "https://www.interviewcake.com/question/bst-checker?utm_source=weekly_email#"}}{\fldrslt 
\fs28 \cf7 \'d7 No thanks, not now}}\
\pard\pardeftab720\sl560\qc
{\field{\*\fldinst{HYPERLINK "https://www.interviewcake.com/question/stock-price"}}{\fldrslt 
\fs28 \cf2 \cb3 1}}
\fs28 \cf7 \cb3 \
\pard\pardeftab720\sl400\qc

\f1 \cf8 \cb1  
\f0 \cf2 \cb9 2
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 3
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 4
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 5
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 6
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 7
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 8
\f1 \cf8 \cb1  
\f0 \cf7 \cb3 \
\pard\pardeftab720\sl560\qc
{\field{\*\fldinst{HYPERLINK "https://www.interviewcake.com/question/bst-checker"}}{\fldrslt \cf2 9}}\
\pard\pardeftab720\sl400\qc

\f1 \cf8 \cb1  
\f0 \cf2 \cb9 10
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 11
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 12
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 13
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 14
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 15
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 16
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 17
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 18
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 19
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 20
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 21
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 22
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 23
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 24
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 25
\f1 \cf8 \cb1  
\f0 \cf7 \
\pard\pardeftab720\sl560\qc
{\field{\*\fldinst{HYPERLINK "https://www.interviewcake.com/question/reverse-string-in-place"}}{\fldrslt \cf2 26}}\
\pard\pardeftab720\sl400\qc

\f1 \cf8  
\f0 \cf2 \cb9 27
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 28
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 29
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 30
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 31
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 32
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 33
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 34
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 35
\f1 \cf8 \cb1  
\f0 \cf7 \
\pard\pardeftab720\sl560\qc
{\field{\*\fldinst{HYPERLINK "https://www.interviewcake.com/question/single-rifle-check"}}{\fldrslt \cf2 36}}\
\pard\pardeftab720\sl400\qc

\f1 \cf8  
\f0 \cf2 \cb9 37
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 38
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 39
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 40
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 41
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 42
\f1 \cf8 \cb1  
\f0 \cf2 \cb9 43
\f1 \cf8 \cb1 \
\pard\pardeftab720\sl400
\cf8 \
\
\
\pard\pardeftab720\sl400\sa200

\f0\fs60 \cf4 No more free questions left!\
\pard\pardeftab720\sl560
{\field{\*\fldinst{HYPERLINK "https://www.interviewcake.com/upgrade"}}{\fldrslt 
\fs26 \cf4 Upgrade Now }}
\f1\fs28 \cf8 \
\pard\pardeftab720\sl780\sa200

\f0\b\fs54 \cf4 \cb2 Write a function to check that a binary tree 
\f2\fs44 \cf3 \uc0\u8628 
\f0\fs54 \cf4  is a valid binary search tree 
\f2\fs44 \cf3 \uc0\u8628 
\f0\fs54 \cf4  .
\f1\b0 \
\pard\pardeftab720\li840\ri840\sl520\sa200

\f0\b\fs48 \cf4 \cb10 \kerning1\expnd-4\expndtw-20
Gotchas\
\pard\pardeftab720\sl520\sa200

\f3\b0\fs30 \cf4 \kerning1\expnd0\expndtw0 Consider this example:\
\pard\pardeftab720\sl520\qc
\cf11 \
\pard\pardeftab720\sl520\sa200
\cf4 Notice that when you check the blue node against its parent, it seems correct. However, it's greater than the root, so it should be in the root's right subtree. So we see that 
\f0\b checking a node against its parent isn't sufficient to prove that it's in the correct spot
\f3\b0 .\
We can do this in 
\f4\fs28 \
\pard\pardeftab720\sl340

\f5 \cf4 \
\pard\pardeftab720\sl340\sa200

\f4\i \cf4 O
\i0 (
\i n
\i0 )
\f3\fs30  time and 
\f4\fs28 \
\pard\pardeftab720\sl340

\f5 \cf4 \
\pard\pardeftab720\sl340\sa200

\f4\i \cf4 O
\i0 (
\i n
\i0 )
\f3\fs30  additional space, where 
\f4\fs28 \
\pard\pardeftab720\sl340

\f5 \cf4 \
\pard\pardeftab720\sl340\sa200

\f4\i \cf4 n
\f3\i0\fs30  is the number of nodes in our tree. Our additional space is 
\f4\fs28 \
\pard\pardeftab720\sl340

\f5 \cf4 \
\pard\pardeftab720\sl340\sa200

\f4\i \cf4 O
\i0 (lg
\i n
\i0 )
\f3\fs30  if our tree is balanced.\
\pard\pardeftab720\li840\ri840\sl520\sa200

\f0\b\fs48 \cf4 \kerning1\expnd-4\expndtw-20
Breakdown\
\pard\pardeftab720\sl520\sa200

\f3\b0\fs30 \cf4 \kerning1\expnd0\expndtw0 One way to break the problem down is to come up with a way to confirm that a single node is in a valid place relative to its ancestors. Then if every node passes this test, our whole tree is a valid BST.\
\pard\pardeftab720\sl520\sa200

\f0\b \cf4 What makes a given node "correct" relative to its ancestors in a BST?
\f3\b0  Well, it must be greater than any node it is in the right subtree of, and less than any node it is in the left subtree of.\
So we could do a walk through our binary tree, 
\f0\b keeping track of the ancestors for each node and whether the node should be greater than or less than each of them
\f3\b0 . If each of these greater-than or less-than relationships holds true for each node, our BST is valid.\
The simplest ways to traverse the tree are depth-first 
\f6\fs24 \cf3 \uc0\u8628 
\f3\fs30 \cf4  and breadth-first 
\f6\fs24 \cf3 \uc0\u8628 
\f3\fs30 \cf4  . They have the same time cost (they each visit each node once). Depth-first traversal of a tree uses memory proportional to the depth of the tree, while breadth-first traversal uses memory proportional to the breadth of the tree (how many nodes there are on the "level" that has the most nodes).\
Because the tree's breadth can as much as double each time it gets one level deeper, 
\f0\b depth-first traversal is likely to be more space-efficient than breadth-first traversal
\f3\b0 , though they are strictly both 
\f4\fs28 \
\pard\pardeftab720\sl340

\f5 \cf4 \
\pard\pardeftab720\sl340\sa200

\f4\i \cf4 O
\i0 (
\i n
\i0 )
\f3\fs30  additional space in the worst case. The space savings are obvious if we know our binary tree is balanced\'97its depth will be 
\f4\fs28 \
\pard\pardeftab720\sl340

\f5 \cf4 \
\pard\pardeftab720\sl340\sa200

\f4\i \cf4 O
\i0 (lg
\i n
\i0 )
\f3\fs30  and its breadth will be 
\f4\fs28 \
\pard\pardeftab720\sl340

\f5 \cf4 \
\pard\pardeftab720\sl340\sa200

\f4\i \cf4 O
\i0 (
\i n
\i0 )
\f3\fs30 .\
\pard\pardeftab720\sl520\sa200
\cf4 But we're not just storing the nodes themselves in memory, we're also storing the value from each ancestor and whether it should be less than or greater than the given node. Each node has 
\f4\fs28 \
\pard\pardeftab720\sl340

\f5 \cf4 \
\pard\pardeftab720\sl340\sa200

\f4\i \cf4 O
\i0 (
\i n
\i0 )
\f3\fs30  ancestors (
\f4\fs28 \
\pard\pardeftab720\sl340

\f5 \cf4 \
\pard\pardeftab720\sl340\sa200

\f4\i \cf4 O
\i0 (lg
\i n
\i0 )
\f3\fs30  for a balanced binary tree), so that gives us 
\f4\fs28 \
\pard\pardeftab720\sl340

\f5 \cf4 \
\pard\pardeftab720\sl340\sa200

\f4\i \cf4 O
\i0 (
\i n
\i0 \
\pard\pardeftab720\sl220

\fs20 \cf4 2
\fs28 \
\pard\pardeftab720\sl340\sa200
\cf4 )
\f3\fs30  additional memory cost (
\f4\fs28 \
\pard\pardeftab720\sl340

\f5 \cf4 \
\pard\pardeftab720\sl340\sa200

\f4\i \cf4 O
\i0 (
\i n
\i0 lg
\i n
\i0 )
\f3\fs30  for a balanced binary tree). We can do better.\
\pard\pardeftab720\sl520\sa200
\cf4 Let's look at the inequalities we'd need to store for a given node:\
\pard\pardeftab720\sl520\qc
\cf11 \
\pard\pardeftab720\sl520\sa200
\cf4 Notice that we would end up testing that the blue node is <20, <30,and <50. Of course, <30 and <50 are implied by <20. So instead of storing each ancestor, we can just keep track of a
\f7 lower_bound
\f3  and 
\f7 upper_bound
\f3  that our node's value must fit inside.\
\pard\pardeftab720\li840\ri840\sl520\sa200

\f0\b\fs48 \cf4 \kerning1\expnd-4\expndtw-20
Solution\
\pard\pardeftab720\sl520\sa200

\fs30 \cf4 \kerning1\expnd0\expndtw0 We do a depth-first walk through the tree, testing each node for validity as we go
\f3\b0 . A given node is valid if it's greater than all the ancestral nodes it's in the right sub-tree of and less than all the ancestral nodes it's in the left-subtree of. Instead of keeping track of each ancestor to check these inequalities, we just check the largest number it must be greater than (its 
\f7 lower_bound
\f3 ) and the smallest number it must be less than (its 
\f7 upper_bound
\f3 ).\
\pard\pardeftab720

\f8\fs24 \cf12 \cb13 \shad\shadx0\shady-20\shadr0\shado255 \shadc0   \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 def\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  bst_checker\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 (\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 root\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ):\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
\pard\pardeftab720\sl480
\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0     \cf16 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 # start at the root, with an arbitrarily low lower bound\
\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0     \cf16 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 # and an arbitrarily high upper bound\
\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0     stack \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 =\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  Stack\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ([(\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 root\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ,\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  MIN_INT\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ,\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  MAX_INT\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 )])\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
\
    \cf16 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 # depth-first traversal\
\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0     \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 while\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 not\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  stack\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 is_empty\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ():\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
        node\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ,\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  lower_bound\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ,\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  upper_bound \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 =\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  stack\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 pop\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ()\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
\
        \cf16 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 # if this node is invalid, we return false right away\
\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0         \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 if\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  \cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 (\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 node\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 value < lower_bound\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 )\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 or\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  \cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 (\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 node\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 value > upper_bound\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ):\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
            \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 return\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  \cf17 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 False\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
\
        \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 if\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  node\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 left\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 :\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
            \cf16 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 # this node must be less than the current node\
\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0             stack\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 push\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ((\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 node\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 left\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ,\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  lower_bound\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ,\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  node\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 value\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ))\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
        \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 if\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  node\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 right\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 :\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
            \cf16 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 # this node must be greater than the current node\
\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0             stack\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 push\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ((\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 node\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 right\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ,\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  node\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 value\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ,\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  upper_bound\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ))\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
\
    \cf16 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 # if none of the nodes were invalid, return true\
\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0     \cf16 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 # (at this point we have checked all nodes)\
\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0     \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 return\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  \cf17 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 True\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
\pard\pardeftab720\sl520\sa200

\f3\fs30 \cf4 \cb10 \shad0 Instead of allocating a stack ourselves, we could write a 
\f0\b recursive function
\f3\b0  that uses the 
\f0\b call stack
\f3\b0  
\f6\fs24 \cf3 \uc0\u8628 
\f3\fs30 \cf4  . This would work, but it would be 
\f0\b vulnerable to stack overflow
\f3\b0 . However, the code does end up quite a bit cleaner:\
\pard\pardeftab720

\f8\fs24 \cf12 \cb13 \shad\shadx0\shady-20\shadr0\shado255 \shadc0   \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 def\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  bst_valid_recursive\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 (\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 root\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ,\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  lower_bound \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 =\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  MIN_INT\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ,\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  upper_bound \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 =\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  MAX_INT\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ):\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
\pard\pardeftab720\sl480
\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0     \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 if\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  \cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 (\cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 not\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  root\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ):\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
      \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 return\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  \cf17 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 True\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
\
    \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 if\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  \cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 (\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 root\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 value > upper_bound \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 or\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  root\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 value < lower_bound\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ):\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
      \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 return\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  \cf17 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 False\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
\
    \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 return\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  bst_valid_recursive\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 (\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 root\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 left\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ,\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  lower_bound\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ,\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  root\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 value\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 )\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  \\\
      \cf14 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 and\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  bst_valid_recursive\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 (\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 root\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 right\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ,\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  root\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 .\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 value\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 ,\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0  upper_bound\cf15 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 )\cf12 \shad\shadx0\shady-20\shadr0\shado255 \shadc0 \
\pard\pardeftab720\li840\ri840\sl520\sa200

\f0\b\fs48 \cf4 \cb10 \kerning1\expnd-4\expndtw-20
\shad0 Complexity\
\pard\pardeftab720\sl340

\f5\b0\fs28 \cf4 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\sl340\sa200

\f4\i \cf4 O
\i0 (
\i n
\i0 )
\f3\fs30  time and 
\f4\fs28 \
\pard\pardeftab720\sl340

\f5 \cf4 \
\pard\pardeftab720\sl340\sa200

\f4\i \cf4 O
\i0 (
\i n
\i0 )
\f3\fs30  additional space, where 
\f4\fs28 \
\pard\pardeftab720\sl340

\f5 \cf4 \
\pard\pardeftab720\sl340\sa200

\f4\i \cf4 n
\f3\i0\fs30  is the number of nodes in our tree. Our additional space is 
\f4\fs28 \
\pard\pardeftab720\sl340

\f5 \cf4 \
\pard\pardeftab720\sl340\sa200

\f4\i \cf4 O
\i0 (lg
\i n
\i0 )
\f3\fs30  if our tree is balanced.\
\pard\pardeftab720\sl400\sa200\qc

\f1\fs34 \cf4 \cb1 Did you get it right?\
\pard\pardeftab720\sl900\qc

\f0\fs30 \cf4 Yes, I'm expert on this
\f1\fs28 \cf8  
\f0\fs30 \cf4 Not quite, review later
\f1\fs28 \cf8 \
\pard\pardeftab720\sl400\sa140\qc

\f0\b\fs34 \cf4 Like this problem? Pass it on!\
\pard\pardeftab720\sl400\qc
{\field{\*\fldinst{HYPERLINK "https://www.facebook.com/sharer/sharer.php?u=https://www.interviewcake.com/question/bst-checker"}}{\fldrslt 
\f1\b0\fs28 \cf2 \cb18  Share}}
\f1\b0\fs28 \cf8  {\field{\*\fldinst{HYPERLINK "http://twitter.com/share?text=Solved%20this%20coding%20interview%20question%20on%20@interviewcake!%20https://www.interviewcake.com/question/bst-checker"}}{\fldrslt \cf2 \cb19  Tweet}}\
\pard\pardeftab720\sl400
\cf8  \
\pard\pardeftab720\sl280

\f9 \cf12 \cb20 \
\
\
\
\
\pard\pardeftab720\sl420
\cf12 Type code!\
\pard\pardeftab720\sl280
\cf12 \
\pard\pardeftab720\sl400\qc

\f0\fs22 \cf8 \cb1  \
Copyright \'a9 2015 Cake Labs, Inc. All rights reserved.\
\pard\pardeftab720\sl300\qc
\cf8 110 Capp St., Suite 200, San Francisco, CA US 94110 (804) 876-2253\
\pard\pardeftab720\sl400\qc
\cf8 \
\pard\pardeftab720\sl400\qc
{\field{\*\fldinst{HYPERLINK "https://www.interviewcake.com/privacy-policy"}}{\fldrslt \cf7 Privacy}} | {\field{\*\fldinst{HYPERLINK "https://www.interviewcake.com/terms-and-conditions"}}{\fldrslt \cf7 Terms}}\
\pard\pardeftab720\sl400

\f1\fs26 \cf0 \cb2 \
\
\pard\pardeftab720\sl400
\cf0 \cb1 \
\pard\pardeftab720\sl220

\f10\fs22 \cf0 \
\
}